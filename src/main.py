import asyncio
import json

import aioredis
from loguru import logger

from handlers.handlers_init import register_handlers
from settings import settings
from utils.redis_utils import cleanup_dlq, mark_task_failed, recover_tasks

logger.add('worker.log', level=settings.LOGLEVEL, rotation='10 MB')


async def main(redis):

    if not task_handlers:
        logger.error("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∑–∞–¥–∞—á!")
        return

    asyncio.create_task(cleanup_dlq(redis))
    try:
        await worker_loop(redis, task_handlers)
    finally:
        await redis.close()


async def worker_loop(redis: aioredis.Redis, handlers: dict):
    await recover_tasks(redis)

    while True:
        try:
            task_id = await redis.brpoplpush(
                'task_queue',
                'processing_queue',
                timeout=0
            )
            logger.info(f'üì• –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞: {task_id}')

            try:
                await process_task(task_id, redis, handlers)
                await redis.lrem('processing_queue', 1, task_id)
            except Exception:
                pass

        except Exception as e:
            logger.error(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ worker: {e}')
            await asyncio.sleep(1)


async def process_task(
        task_id: str, redis: aioredis.Redis, handlers: dict):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–¥–∞—á"""
    task_data = await redis.get(f'task:{task_id}')
    if not task_data:
        logger.warning(f'‚ö†Ô∏è –ó–∞–¥–∞—á–∞ {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
        return

    task = json.loads(task_data)
    handler = handlers.get(task['task_type'])

    if not handler:
        await mark_task_failed(
            redis,
            task_id,
            f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∑–∞–¥–∞—á–∏: {task['task_type']}"
        )
        logger.warning(f'‚ö†Ô∏è –ó–∞–¥–∞—á–∞ {task_id} –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, —Ç–∏–ø '
                       f'–∑–∞–¥–∞—á–∏ {task["task_type"]} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è')
        return

    try:
        # TODO: –æ—Ç–¥–∞–≤–∞—Ç—å –≤ handler –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã –æ–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–ª —Å redis,
        #  —ç—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç —Å–¥–µ–ª–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—â–µ –∏ –∏–∑–æ–ª–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É,
        #  –ø—Ä–∏–¥–µ—Ç—Å—è –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ —Å—é–¥–∞, –Ω–æ —Ç–∞–∫
        #  –ø—Ä–∞–≤–∏–ª—å–Ω–µ–µ, –∫ —Ç–æ–º—É –∂–µ handler`—ã —Å—Ç–∞–Ω—É—Ç –º–µ–Ω—å—à–µ –ø–æ –æ–±—ä–µ–º—É –∏ –±—É–¥—É—Ç
        #  —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–æ —Å–≤–æ–∏–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
        await handler(task_id, redis)
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ {task_id}: {str(e)}")
        retries = await redis.hincrby(f'task:{task_id}', 'retries', 1)
        if retries > 2:
            await redis.rpush('dead_letters', task_id)
            await redis.lrem('processing_queue', 1, task_id)
            await mark_task_failed(redis, task_id, "–ü—Ä–µ–≤—ã—à–µ–Ω–æ —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫")
        else:
            await redis.lrem('processing_queue', 1, task_id)
            await redis.rpush('task_queue', task_id)
        raise


if __name__ == '__main__':
    redis_client = aioredis.Redis.from_url(
        f'redis://{settings.HOST}:{settings.REDIS_PORT}/{settings.REDIS_DB}',
        decode_responses=True
    )
    task_handlers = asyncio.run(register_handlers(redis_client))
    asyncio.run(main(redis_client))
